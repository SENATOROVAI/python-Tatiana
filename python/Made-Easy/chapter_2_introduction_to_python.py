# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: base
#     language: python
#     name: python3
# ---

"""Module for chapter 2."""

# # Что такое Python?
#
# Python — это бесплатный интерпретируемый высокоуровневый язык программи­
# рования общего назначения с открытым исходным кодом.
#
# Python был создан Гвидо ван Россумом и впервые выпущен в 1991 г. Он поддержи­вает несколько парадигм программирования, включая структурное (особенно про­
# цедурное) объектно-ориентированное и функциональное программирование. Его
# языковые конструкции и объектно-ориентированный подход позволяют програм­мистам писать понятный и логичный код в рамках как небольших, так и крупно­
# масштабных проектов1.

# Самыми популярными языками программирования для специалистов по данным являются:
#
# <div align="center">
# <table >
#   <tr>
#     <td>Python</td>
#     <td>C++</td>
#   </tr>
#   <tr>
#     <td>R</td>
#     <td>Java</td>
#   </tr>
#   <tr>
#     <td>SQL</td>
#     <td>MATLAB</td>
#   </tr>
# </table>
# </div>
#
#

# # Какой язык выбрать для изучения?
#
# Если выначинаете карьеру программиста или хотите выучить свой первый язык
# программирования, то будет разумно остановиться на одном из самых популярных
# и признанных языков программирования. Следовательно, язык, который мы изуча­ем, должен удовлетворять всем следующим критериям:<br><br>
# - Это один из самых популярных языков программирования, прочно вошедший
# в индустрию разработки программного обеспечения.
#
# - Занимает первое место среди языков-аналогов согласно рейтингам из открытых
# источников или статей по языкам программирования.
#
#
# - Стабильно популярный, а еще лучше с растущей популярностью.
#   
# - У языка есть большой набор библиотек, инструменты, фреймворки и большое
# сообщество, которое вносит свой вклад в развитие языка.
#
# - Язык хорошо востребован на рынке труда и позволяет получать хорошую зар­плату.

# ## Python и другие языки программирования
#
# Во время работы с компьютерами и разным программным обеспечением вы можете столкнуться с повторяющейся и времязатратной работой. Всегда хочется автоматизировать такую работу, например:
#
# - Поиск и замена в большом количестве текстовых файлов
#
# - Переименование и переупорядочивание множества файлов с фотографиями
#
# - Написание небольшой настраиваемой базы данных
#
# - Создание специализированного приложения с графическим интерфейсом
#
# - Разработка простой игры
#
#
# Если вы профессиональный разработчик, возможно, вы:
#
# - Работаете с библиотеками на C/C++/Java
#
# - Видите, что цикл записи/компиляции/тестирования/повторной компиляции слишком медленный
#
# - Пишите набор тестов для библиотек и это вам надоело
#
#
# Для автоматизации таких задач можно написать shell-скрипт для UNIX или bat-файл для Windows, но они лучше подходят для перемещения файлов и изменения текстовых данных, а не для приложений с графическим интерфейсом и игр.
#
# Python, в отличие от C/C++/Java:
#
# - Проще в использовании
#
# - Доступен в операционных системах Windows, MacOS и UNIX
#
# - Позволяет выполнить работу быстрее
#
# - Имеет мощный инструментарий для создания больших программ
#
# - Содержит встроенные высокоуровневые типы данных, такие как гибкие массивы и словари
#
#
# Python позволяет:
#
# - Разделять программу на модули, которые можно повторно использовать
#
# - Использовать большой набор стандартных модулей для файлового ввода-вывода, системных вызовов, сокетов и создания графических интерфейсов (например, Tkinter)
#
#
# ### Преимущества Python
#
# - Интерпретируемый язык, что экономит время при разработке программы
#
# - Интерактивный режим, позволяющий экспериментировать с функциями языка и тестировать их
#
# - Удобный настольный калькулятор
#
# - Компактные и читабельные программы, которые короче эквивалентных программ на C, C++ или Java
#
#
# #### Причины компактности Python
#
# - Типы данных высокого уровня позволяют записывать сложные операции в одну строку
#
# - Группировка операторов выполняется с помощью отступов, а не скобок
#
# - Объявление переменных или аргументов не требуется
#
#
# ### Расширяемость Python
#
# - Если вы знаете C, можете добавить в интерпретатор новые функции или модули
#
# - Python можно связать с библиотеками, доступными в двоичной форме (например, графическими библиотеками)
#
# - Использовать интерпретатор Python как расширение или командный язык для приложений на C
#
#
#
#

# # Философия Python
# Основная философия языка кратко изложена в документе Zen of Python', в котором
# можно найти такие афоризмы, как:
# - Красивое лучше, чем уродливое.
#
# - Явное лучше, чем неявное.
#
# - Простое лучше, чем сложное.
#
# - Сложное лучше, чем запутанное.
#
# - Читаемость имеет значение.
#

# ## Преимущества Python по сравнению с другими языками
#
# ### Простота
# Python напоминает "дисциплинированный английский", что делает его легко читаемым и понятным. Простота позволяет сосредоточиться на решении задач, а не на синтаксисе.
#
# ### Легкость в изучении
# Python чрезвычайно прост для начинающих благодаря своему простому синтаксису.
#
# ### Свободный и открытый исходный код
# Python распространяется бесплатно и по модели FLOSS (Free/Libre and Open Source Software). Это позволяет свободно распространять, читать и изменять исходный код, а также использовать его в бесплатных проектах.
#
# ### Высокоуровневость
# Python — язык высокого уровня, что избавляет от необходимости управлять множеством деталей, таких как управление памятью.
#
# ### Портативность
# Python можно использовать на различных платформах, включая Windows, GNU/Linux, Macintosh, Solaris, Palm OS, PlayStation, Sharp Zaurus, Windows CE и PocketPC.
#
# ### Интерпретируемость
# Python не требует компиляции в двоичный код. Программы Python запускаются непосредственно из исходного кода, который преобразуется в байт-коды и затем переводится на родной язык компьютера.
#
# **Преимущества интерпретируемости:**
# - Не нужно компилировать программу.
#   
# - Не нужно заботиться о связке и загрузке библиотек.
#   
# - Программы Python более портативны и легко копируются на другой компьютер для запуска.
#
#

# Вот исправленный вариант текста с правильной вложенностью:
#
# ## Преимущества Python и основные интерпретаторы
#
# ### Преимущества Python
#
# - #### Простота
#   Python напоминает "дисциплинированный английский", что делает его легко читаемым и понятным. Простота позволяет сосредоточиться на решении задач, а не на синтаксисе.
#
# - #### Легкость в изучении
#   Python чрезвычайно прост для начинающих благодаря своему простому синтаксису.
#
# - #### Свободный и открытый исходный код
#   Python распространяется бесплатно и по модели FLOSS (Free/Libre and Open Source Software), позволяя свободно распространять, читать и изменять исходный код.
#
# - #### Высокоуровневость
#   Python — язык высокого уровня, что избавляет от необходимости управлять множеством деталей, таких как управление памятью.
#
# - #### Портативность
#   Python можно использовать на различных платформах, включая:
#   - Windows
#   - GNU/Linux
#   - Macintosh
#   - Solaris
#   - Palm OS
#   - PlayStation
#   - Sharp Zaurus
#   - Windows CE
#   - PocketPC
#
# - #### Интерпретируемость
#   Python не требует компиляции в двоичный код. Программы Python запускаются непосредственно из исходного кода, который преобразуется в байт-коды и затем переводится на родной язык компьютера.
#   - **Преимущества:**
#     - Не нужно компилировать программу.
#     - Не нужно заботиться о связке и загрузке библиотек.
#     - Программы Python более портативны и легко копируются на другой компьютер для запуска.
#
# - #### Объектная ориентированность
#   Python поддерживает как процедурное, так и объектно-ориентированное программирование. Программа строится на объектах, которые включают в себя данные и функциональность.
#
# - #### Расширяемость
#   Код Python можно расширять с помощью C/C++/Java, что позволяет улучшить производительность и скрыть важные фрагменты алгоритмов.
#
# - #### Встраиваемость
#   Код Python можно встраивать в программы на C/C++, что позволяет использовать возможности скриптов.
#
# - #### Внушительные библиотеки
#   Стандартная библиотека Python содержит инструменты для множества задач:
#   - Работа с Интернетом
#   - Создание графических интерфейсов
#   - Подключение к базам данных
#   - Генерация случайных чисел
#   - Обработка регулярных выражений
#   - Модульное тестирование
#
# ### Основные интерпретаторы Python
#
# - #### IPython
#   Интерактивная оболочка, используемая для вычислений на Python, с поддержкой отступов, выделения синтаксиса цветом и дополнения табуляции. Часто используется в Jupyter Notebook.
#
# - #### CPython
# наиболее распространённая, эталонная реализация языка программирования Python. CPython является интерпретатором байт-кода, написан на C. Разработка ведётся группой разработчиков под руководством создателя Python Гвидо ван Россума. CPython является программным обеспечением с открытым исходным кодом.
#
# - #### IronPython
#   Реализация Python для платформы .NET, которая использует библиотеки Python и .NET и интегрируется с Visual Studio.
#
# - #### Jython
#   Реализация Python для платформы Java, преобразующая код Python в байт-код Java, что позволяет запускать его на любой машине с JVM.
#
# - #### PyPy
#   Быстрая и совместимая альтернатива CPython, реализованная в RPython с использованием JIT-компилятора, что увеличивает производительность.
#
#   JIT-компилятор - (англ. just-in-time, компиляция «точно в нужное время»), динамическая компиляция (англ. dynamic translation) — технология увеличения производительности программных систем, использующих байт-код, путём компиляции байт-кода в машинный код или в другой формат непосредственно во время работы программы. 
#
# - #### PythonNet
#   Позволяет интеграцию Python с .NET CLR, обеспечивая почти бесшовную работу между Python и .NET.
#
# - #### Stackless Python
#   Интерпретатор Python с поддержкой микропотоков, каналов связи и задач, что помогает избежать накладных расходов, связанных с обычными потоками операционной системы.
#
#

# глобальная блокировка интерпретатора (GIL, Global Interpreter Lock) — это механизм, обеспечивающий, при использовании интерпретатора CPython, безопасную работу с потоками. Но из-за GIL в конкретный момент времени выполнять байт-код Python может лишь один поток операционной системы. В результате нельзя ускорить Python-код, интенсивно использующий ресурсы процессора, распределив вычислительную нагрузку по нескольким потокам. Негативное влияние GIL на производительность Python-программ, правда, на этом не заканчивается. Так, GIL создаёт дополнительную нагрузку на систему. Это замедляет многопоточные программы и, что выглядит достаточно неожиданно, может даже оказать влияние на потоки, производительность которых ограничена подсистемой ввода/вывода.

# ## Версии Python
#
# ### Python 2
# - Вышедший в конце 2000 г.
#
# - Характеризовался более прозрачным и полным процессом разработки.
#
# - Появились документы PEP (Python Enhancement Proposal).
#
# - Новые функции, включая сборщик мусора с обнаружением циклов и расширенную поддержку Unicode.
#
# - Добавлены списочные включения и другие функции, такие как объединение типов и классов Python в одну иерархию в версии 2.2.
#
#
# ### Python 2.7
# - Выпущен 3 июля 2010 г., после Python 3.0 (2008 г.).
#
# - Планировался как последний выпуск в линейке версий 2.x.
#
# - Цель: облегчить переход на Python 3 и предоставить совместимость.
#
# - Новые модули: `unittest` (автоматизация тестирования), `argparse` (анализ параметров командной строки).
#
# - Удобные классы в коллекциях.
#
# - Популярен благодаря совместимости с проверенными временем библиотеками.
#
# - Основная версия, используемая при упоминании Python 2.
#
#
# ### Python 3
# - Выпущен в конце 2008 г. после масштабной переработки.
#
# - Устранены внутренние недостатки более ранних версий.
#
# - Очистка кодовой базы и устранение избыточности.
#
# - Основные изменения:
#
#   - Превращение оператора `print` во встроенную функцию.
#
#   - Улучшение методики деления целых чисел.
#
#   - Расширение поддержки Unicode.
#
# - Сначала медленное принятие из-за отсутствия обратной совместимости с Python 2.
#
# - Ускорение принятия благодаря прекращению поддержки Python 2 и переносу библиотек на Python 3.
#
# - Большинство популярных пакетов теперь поддерживаются в Python 3.
#
#
# ### Ключевые отличия версий
# - Python 2.7 и Python 3 имеют схожие возможности, но не полностью взаимозаменяемы.
#
# - Различия в синтаксисе и обработке кода.
#
# - Можно писать хороший код и полезные программы в любой версии, но важно учитывать различия.
#

# ## Как установить и использовать Python
#
# ### Установка автономного дистрибутива Python
# Скачайте последнюю версию Python по ссылке: [python.org/downloads](https://www.python.org/downloads). 
# Установка включает только интерпретатор Python по умолчанию.
#
#
# ### Установка дополнительных инструментов
# Для использования IDE, консоли Python, Jupyter Notebook и отдельных пакетов, автономная установка Python может быть недостаточной. Этот способ занимает меньше места в памяти.
#
#
# ### Установка дистрибутива Anaconda
# Рекомендуется использовать дистрибутив Anaconda для более полной установки. Anaconda включает в себя:
# - IDE
#
# - Консоль Python
#
# - Jupyter Notebook
#
# - Множество дополнительных пакетов Python
#
#

# ## Дистрибутив Anaconda
#
# ### Основные преимущества Anaconda
# Anaconda — это простой и часто используемый способ установки Python и необходимых пакетов. Он свободно доступен и легко устанавливается. Этот дистрибутив с открытым исходным кодом является отраслевым стандартом для анализа данных и машинного обучения на Linux, Windows и MacOS, и у него более 11 миллионов пользователей.
#
# ### Возможности Anaconda
# - Быстрая загрузка более 1500 пакетов Python/R для анализа данных.
#
# - Управление библиотеками, зависимостями и средами с помощью Conda.
#
# - Разработка и обучение моделей машинного и глубокого обучения с помощью Scikit-learn, TensorFlow и Theano.
#
# - Эффективный и масштабируемый анализ данных с Dask, NumPy, Pandas и Numba.
#
# - Визуализация результатов с Matplotlib, Bokeh, Datashader и Holoviews.
#
#
# ### Почему именно Anaconda?
# - **Выбор версии Python:** Возможность установки нужной версии Python.
#
#
# - **Независимость пакетов:** Установка/обновление пакетов независимо от системных библиотек и прав администратора.
#
#
# - **Инструмент Conda:** Устанавливает бинарные пакеты без необходимости компиляции, удобно при ограниченных правах.
#
#
# - **Совместимость пакетов:** Упрощает определение совместимости пакетов, необходимых для установки других пакетов.
#
#
# - **Гибкость установки:** Возможность загрузки полной версии с множеством библиотек или минимальной комплектации (miniconda) для выбора необходимых компонентов.
#
#
# - **Безопасность системных библиотек:** Отсутствие риска повредить системные библиотеки.
#
#

# ## Запуск Python через командную строку
#
# ### Основы командной строки
#
# Командная строка — это эффективный способ запуска программного обеспечения, включая Python, на любой операционной системе (MacOS, Windows, Linux). Освоение командной строки полезно, но мы сосредоточимся на запуске Python через командную строку и перейдем к использованию более удобных инструментов, таких как IPython, Spyder IDE или Jupyter Notebook.
#
# ### Использование командной строки
#
# - Командная строка позволяет запускать команды для просмотра папок и файлов, выполнения скриптов и работы с Python.
#
# - В MacOS открыть Terminal можно через Finder, в разделе утилит. Также можно использовать комбинацию клавиш <Command> + пробел и ввести "Terminal".
#
# - В Windows аналогичное приложение называется командной строкой (cmd).
#
# ### Запуск Anaconda Prompt
#
# - В любой операционной системе можно открыть Anaconda Prompt — командную строку Anaconda.
#
# - Anaconda Prompt работает так же, как обычная командная строка и показывает папку, где установлена Anaconda и интерпретатор Python.
#
#   
#
# ### Запуск интерпретатора Python
#
# 1. Откройте Anaconda Prompt.
# <center>
#
# ![anaconda prompt in search](../../Images/python_made_easy/c2_anaconda_prompt.png)
#
# </center>
#
# 2. Введите команду `python` и нажмите клавишу <Enter>.
#
# 3. Командная строка покажет информацию о версии установленного Python.
#
# <center>
#
# ![anaconda prompt in search](../../Images/python_made_easy/c2_anaconda_prompt_terminal.png)
#
# </center>
#
# 4. В приглашении ввода Python можно начинать вводить команды.

# ### Приложения Anaconda
#
# На рис показано, как выглядит окно Anaconda Navigator после открытия.
# В нем вы видите несколько приложений, используемых для тех или иных действий.
# Но мы начнем с 3 основных программ, которые используются чаще всего:
#
# - Консоль IPython;
#   
# - Spyder;
#   
# - Jupyter Norebook.
#
# <center>
#
# ![anaconda prompt in search](../../Images/python_made_easy/c2_anaconda_navigator.png)
#
# Навигатор Анаконда
# </center>

# ### Консоль Qt
# Консоль Qt — это легкое приложение, похожее на командную строку, но с дополнительными функциями графического интерфейса, такими как встраивание рисунков, многострочное редактирование с подсветкой синтаксиса и подсказки.
#
# Для краткого ознакомления с функциями консоли наберите команду ?.
#
# Консоль IPython позволяет выполнять команды, взаимодействовать и визуализировать данные через множество интерпретаторов IPython. Каждая консоль выполняется в отдельном процессе, что позволяет запускать, прерывать и завершать сессии независимо друг от друга.
#
# Примечание: Консоль Qt выполняет введенные строки сразу, если они завершены. Для многострочных команд используйте Ctrl+Enter для перехода на новую строку и Shift+Enter для выполнения многострочного блока.
#
# <center>
#
# ![c2_qt_console](../../Images/python_made_easy/c2_qt_console.png)
#
# Консоль Qt
#
# </center>

# ### Приложение Jupyter Notebook
#
# Jupyter Notebook — это веб-приложение для интерактивных вычислений, предназначенное для разработки, документирования и выполнения кода через браузер. Оно сочетает в себе текстовые пояснения, математические вычисления и мультимедийные результаты в документы, называемые Notebook.
#
# ### Основные возможности веб-приложения
# Jupyter Notebook обеспечивает работу с кодом Python в редакторе, встроенном в браузер, с подсветкой синтаксиса, отступами и автоматическим заполнением табуляцией. Результаты вычислений выводятся в виде мультимедийных форматов, таких как HTML, LaTeX, PNG и SVG. Текст можно форматировать с использованием Markdown, включая интеграцию математических формул через LaTeX и визуализацию с помощью MathJax.
#
# ### Документы Notebook
# Документы Notebook (.ipynb) содержат входные и выходные данные сеанса работы, текстовые пояснения и математические вычисления. Эти файлы хранятся в формате JSON и могут быть включены в систему контроля версий для совместной работы.
#
# ### Запуск сервера Notebook
# Сервер Jupyter Notebook запускается из командной строки или через Anaconda Navigator, предоставляя доступ к созданным документам через веб-интерфейс на localhost. Можно запускать несколько серверов на разных портах.
#
# ### Создание нового документа Notebook
# Новые документы создаются через интерфейс Jupyter Notebook или меню File | New и автоматически открываются в новой вкладке браузера.
#
# ### Открытие документа Notebook
# Каждый открытый документ соответствует одному интерактивному сеансу, который остается активным даже при закрытии браузера. Документы можно открывать и управлять через панель управления, сохраняя активное состояние ядра для повторного использования.
#
#
#
#
#
#
#

#
# ### Интерфейс документа Notebook
#
# После создания нового документа Notebook открывается окно с следующими элементами:
#
# - **Имя документа**: Отображается вверху страницы рядом с логотипом Jupyter. Это имя соответствует имени файла .ipynb. При нажатии на имя документа открывается диалоговое окно для его переименования.
#   
# - **Панель меню**: Содержит различные операции, доступные для работы с документом.
#   
# - **Панель инструментов**: На панели инструментов расположены иконки для наиболее часто используемых операций над документом.
#   
# - **Ячейка кода**: Это тип ячейки по умолчанию. В ней можно писать и выполнять код Python.
#
# <center>
#
# ![Empty Document Notebook](../../Images/python_made_easy/c2_jupyter_empty_doc.png)
#
# Пустой документ Notebook с ячейкой кода и элементами интерфейса.
#
# </center>

# ### Структура и функциональность Jupyter Notebook
#
# Документ Jupyter Notebook состоит из последовательности ячеек, каждая из которых может быть ячейкой кода, ячейкой Markdown или неформатированной ячейкой.
#
# - **Ячейки кода**: Позволяют писать и выполнять код Python. Результаты выполнения отображаются в ячейке под кодом, что позволяет выводить текст, графики (например, с помощью Matplotlib) и другие форматы данных.
#
# - **Ячейки Markdown**: Используются для документации и разметки текста с использованием языка Markdown. Здесь можно форматировать текст, включать математические формулы LaTeX и создавать заголовки для структурирования документа.
#
# - **Неформатированные ячейки**: Предназначены для написания текста, который не требует обработки или форматирования со стороны Jupyter. Эти ячейки полезны для вставки блоков LaTeX, которые будут обработаны только при экспорте документа.
#
# ### Рабочий процесс
#
# В Jupyter Notebook можно работать интерактивно, выполняя код по частям и наблюдая результаты в реальном времени. Работа происходит пошагово: пишется код в ячейках, выполняется и анализируется результат. 
#
# ### Горячие клавиши
#
# Для удобства работы в Jupyter Notebook предусмотрены горячие клавиши, позволяющие выполнять основные действия без использования мыши:
#
# - **Shift + Enter**: Выполнить код в текущей ячейке и перейти к следующей.
#
# - **Esc**: Переход в командный режим, где доступны сочетания клавиш для навигации по документу.
#
# - **Enter**: Режим редактирования содержимого ячейки.
#
#
# ### Построение графиков
#
# Jupyter Notebook интегрируется с библиотекой Matplotlib для построения графиков непосредственно в документе, что делает его удобным инструментом для анализа данных и визуализации результатов.
#
# ### Совместимость с браузерами
#
# Jupyter Notebook поддерживает последние версии браузеров Chrome, Firefox, Safari и Edge.

# ### Что лучше использовать?
#
# Python предлагает несколько способов работы с кодом, каждый из которых имеет свои преимущества, в зависимости от типа проекта и личных предпочтений.
#
# **Командная строка:** Простой, но не самый удобный способ для написания и выполнения кода Python. Часто используется для специфических задач, требующих быстрого запуска кода.
#
# **IPython Qt консоль:** Графическая консоль, предоставляющая дополнительные функции, такие как встраивание графиков и многострочное редактирование с подсветкой синтаксиса. Удобна для быстрой проверки кода или отдельных сценариев.
#
# **Spyder IDE:** Используется для написания, отладки и тестирования кода Python. Позволяет выполнение кода как построчно, так и по ячейкам, отображение результатов и графиков. Рекомендуется для серьезной разработки благодаря богатым функциональным возможностям.
#
# **Jupyter Notebook:** Интерактивная веб-платформа для создания документов, включающих код, текст, графику и математические формулы. Идеально подходит для анализа данных и образовательных целей, позволяет создавать интерактивные исследования и легко делиться результатами.
#
# Решение о выборе зависит от целей работы: быстрая проверка кода — IPython консоль или командная строка; разработка и отладка — Spyder IDE; создание документации и анализ данных — Jupyter Notebook.
#
# # Резюме
#
# Глава вводит в мир Python как универсального языка программирования, особенно популярного в анализе данных и машинном обучении. Рассматриваются основные инструменты Anaconda для работы с Python: IPython-консоль, Spyder IDE и Jupyter Notebook, каждый из которых имеет свои уникальные возможности и применение.

# ### Упражнения:
#
# #### Ответьте на вопросы.
#
# 1. Python — это программное обеспечение с открытым исходным кодом. Это то
# же самое, что и бесплатное ПО?
#
#     **Ответ**: Да пайтон является одним из примеров бесплатного ПО.
#     
#
# 2. У всех ли бесплатных программ открытый исходный код? А если нет, то в чем
# разница?
#
#     **Ответ**: Не все бесплатные программы имеют открытый исходный код. Разница между программами с открытым и закрытым исходным кодом заключается в доступности исходного кода для общественности и разработчиков.
#
#
#
# 3. Python поддерживает динамическую типизацию. Что это такое?
#
#     **Ответ**: Динамическая типизация — это технология, при которой переменной можно присвоить значение любого типа данных.
#     
# 4. Назовите 5 самых популярных языков программирования для специалистов по
# анализу данных.
#
#     **Ответ**: Самыми популярными языками программирования для специалистов по анализу данных являются Python, R, Julia, MATLAB и JavaScript.
#
#
# 5. В чем заключается преимущество Python по сравнению с языком С?
#
#     **Ответ**: По сравнению с языком С, Python имеет более простой синтаксис и более простую семантику.
#
#
# 6. Python портативен. Что в этом контексте означает «портативность»?
#
#     **Ответ**: Портативность — это возможность использования программы на компьютере без необходимости установки.
#
#
# 7. В чем разница между «расширяемым» и «встраиваемым» языком?
#    
#     **Ответ**: Расширяемый язык — это язык программирования, который позволяет добавлять новые возможности в существующий код. Встраиваемый язык — это язык программирования, который позволяет встраивать код в другой язык.
#
# 8. В чем смысл IDE? Чем она отличается от командной строки?
#    
#     **Ответ**: IDE — это интегрированная среда разработки (Integrated Development Environment), которая позволяет быстро создавать и отлаживать программы. Командная строка — это инструмент, который позволяет выполнять команды в терминале.
#
# 9.  Как открыть существующий документ Jupyter Notebook? Чем эта процедура от­
# личается от открытия PDF-файла или текстового файла?
#
#     **Ответ**: Чтобы открыть существующий документ Jupyter Notebook, запустите сервер Jupyter Notebook, перейдите к файлу .ipynb и кликните на него для открытия в интерактивном режиме в браузере. Отличие от открытия PDF или текстового файла в том, что Jupyter Notebook позволяет выполнять код, вставлять мультимедийные элементы и сохранять изменения.
#
#
# 10. В чем разница между «ячейками разметки Markdown» и «ячейками кода» в Jupyter Notebook? Для чего они нужны?
#
#     **Ответ**: 
#     Ячейки разметки Markdown в Jupyter Notebook предназначены для написания структурированного текста с форматированием с использованием Markdown. Они используются для документирования кода, создания заголовков, списков, вставки изображений и формул LaTeX. 
#     Ячейки кода в Jupyter Notebook предназначены для написания и выполнения кода на выбранном языке программирования (например, Python). Они позволяют выполнять вычисления, создавать графики и выводить результаты прямо в документе.
#
#
#
# ### Правда или ложь
# 1. Python назван в честь змеи питон?
#    - Правда.
#
# 2. Python — это высокоуровневый язык общего назначения?
#    - Правда.
#
# 3. Python компилируется и не интерпретируется?
#    - Ложь.
#
# 4. В Python команда два + два вернет четыре?
#    - Правда.
#
# 5. Консоль IPython аналогична окну командной строки?
#    - Ложь.
#
# 6. Графики, выводимые в документе Jupyter Notebook, отображаются внутри самого документа?
#    - Правда.
#
# 7. В комплекте с пакетом Anaconda идут браузеры Chrome и Firefox?
#    - Ложь.
#
# 8. «Простое лучше, чем сложное» — это одна из философий Python?
#    - Правда.
#
# 9. Аббревиатура FLOSS означает «Free/Libre and Open Source Software»?
#    - Правда.
#
# 10. Python поддерживает ТОЛЬКО объектно-ориентированное программирование?
#     - Ложь.

#
