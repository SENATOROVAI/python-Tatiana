# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: base
#     language: python
#     name: python3
# ---

"""Module on basics of python."""

# # Введение в Python
# **Что такое Python?**
#
# Введение в Python
# 2.1 . Что такое Python?
# Python - это бесплатный интерпретируемый высокоуровневый язык программи­рования общего назначения с открытым исходным кодом.
# Python был создан Гвидо ван Россумом и впервые выпущен в 1991 r. Он поддержи­вает несколько парадигм программирования, включая структурное (особенно про­цедурное) объектно-ориентированное и функциональное программирование. Его языковые конструкции и объектно-ориентированный подход позволяют програм­мистам писать понятный и логичный код в рамках как небольших, так и крупно­масштабных проектов
#
# **Философия Python**
#
# ♦ Красивое лучше, чем уродливое. 
#
# ♦ Явное лучше, чем неявное.
#
# ♦ Простое лучше, чем сложное.
#
# ♦ Сложное лучше, чем запутанное.
#
#  ♦ Читаемость имеет значение.
#
#  # Преимущества Python по сравнению с другими языками
#  
# **Простота**
#
# **Легкость в изучении**
#
# **Свободный и открытый исходный код**
#
# Python распространяется по модели FLOSS (Free/Libre and Open Source Software). Вы можете открыто распространять дубликаты этого продукта, чи­тать его исходный код, вносить в него изменения и использовать его в бесплатных проектах.
#
# **Высокоуровневость**
#
# Язык программирования высокого уровня - это язык, в котором вам не приходит­ ся думать о множестве деталей, которые нужны при использовании языка программирования низкого уровня. Например, в Python не приходится беспокоиться об управлении памятью, используемой вашей программой. Проще говоря, языки низ­кого уровня ближе к аппаратному обеспечению, чем языки программирования вы­сокого уровня, которые ближе к человеческим языкам.
#
# **Портативность**
#
# Python можно использовать на разных типах машин, независимо от аппаратных средств или ограничений операционной системы. Его можно использовать в Windows, GNU/Linux, Macintosh, Solaris, Palm OS, PlayStation, Sharp Zaurus, Windows СЕ и PocketPC!
#
# **Объектная ориентированность**
#
# Реализована значительно проще чем в других языках программирования.
#
# **Расширяемость**
#
# Если в коде есть критический фрагмент, от которого зависит быстродействие, или вы хотите, чтобы какой-то фрагмент алгоритма бьm скрыт, вы можете написать эту часть программы на С или С++, а затем использовать ее из программы на Python. Python легко расширяется с помощью кода C/C++/Java и легко встраивается в приложения.
#
# **Встраиваемость**
#
# Код Python можно встраивать в программы на С/С++, что позволяет использовать возможности скриптов.
#
# **Внушительные библиотеки**
#
# **Интерпретируемость**
#
# Python не требует компиляции в двоичный код, а ваша программа запускается пря­ мо из исходного кода. Внутри Python преобразует исходный код в промежуточную форму, называемую байт-кодами, затем переводит ее на родной язык компьютера и запускает.
#
# # Интерпретаторы Python 
#
# Интерпретатор - это разновидность компьютерной программы, которая непосредственно выполняет инструкции, написанные на каком-либо языке программирования или языке сценариев. Под непосредственным выполнением подразумевается, что предварительная компиляция кода в программу на машинном языке не требуется.
#
#  **Python** - это альтернативный интерпретатор Python. Это интерактивная оболочка, которая используется для вычислений на Python. В ней гораздо больше полезных функций по сравнению с интерпретатором Python, используемым по умолчанию.
#
#  **Cpython** - это стандартная и наиболее широко используемая реализация языка программирования Python. Написанный на С и Python, интерпретатор CPython содер­жит много внешних функций С и связан с другими языками программирования.
#
#  **IronPython** - это реализация языка программирования
#  Python для платформы .NET, в которой используются
#  библиотеки Python и .NET. Этот интерпретатор может (Поддержка - до Python 2.7) предоставлять код Python другим языкам, относящим­
#  ся к платформе .NET.
#  
#  **Jython** - реализация которая работает на платформе Java. Это сочетание Java и Python преобразует
# код Python в байт-код Java и, следовательно, позволяет за-
# пускать код Python на любой машине, на которой установлена NМ.
#
# **PуРу** - это быстрая и совместимая альтернативная реа­ лизация языка программирования Python. Этот интерпре­ татор Python реализован в RPython, который представляет собой ограниченное статически типизированное подмно­жество языка программирования Python.
#
# **PythonNet** позволяет выполнить почти бесшовную интеграцию Python с .NET CLR. Подход этого интерпретатора можно счи­тать противоположным тому, которому следует IronPython.
#
# **Stackless Python** - это наличие микропото­ ков. Эта возможность помогает избежать значительной части накладных: расходов, связанных с обычными потоками операционной системы.
#
# # Версии Python
#
# **Python 2**
#
# Вышел в конце 2000 Постепенно в Python 2 добавлялись объединение типов и клас­сов в одну иерархию в версии 2.2
#
# **Python 2.7** 
#
# Вышел в 2010, целью было облегчить переход с Python 2 на Python 3 и предоставить совместимость между этими версиями.
#
# **Python 3**
#
#  Python 3 бьm выпущен в конце 2008 г. после масштабной переработки, и в нем были устранены и исправлены внутренние недостатки, при­ сущие более ранним версиям языка. Основное внимание при разработке Python 3 уделялось очистке кодовой базы и устранению избыточности, чтобы для каждой задачи существовал лишь один способ ее выполнения. К основным изменениям в Python 3 .0 можно отнести превращение оператора print во встроенную функцию, улучшение методики деления целых чисел и расширение поддержки Unicode. Сна­ чала Python 3 довольно медленно проникал в работу программистов, т. к. он не бьm обратно совместим с Python 2, и людям приходилось выбирать, какую версию язы­ ка использовать. Кроме того, многие библиотеки пакетов все еще поддерживали только Python 2. Однако когда разработчики языка объявили, что поддержка
#
# # Дистрибутив Anaconda 
# *Дистрибутив Anaconda* - это самый простой и наиболее часто используемый спо­ соб установки Python и других необходимых пакетов. Он находится в свободном доступе и прост в установке.
#
# # Запуск Python через командную строку.
#
# **Командная строка** - это приложение, которое позволяет запускать команды для просмотра папок и файлов, выполнения скриптов и, конечно, для работы с Python.
#
# **Консоль** (она же терминал или командная строка) - это текстовый способ взаи­модействия с вашей ОС, точно такой же, по существу, как рабочий стол и мышь, которые тоже являются способом взаимодействия с системой.
#
# **IPython Qt консоль** - это очень легкое приложение, во многом похожее на ко­ мандную строку, но с дополнительными функциями, которые можно реализовать только в графическом интерфейсе, такими как встраивание графиков, правильное многострочное редактирование с подсветкой синтаксиса, графические подсказки по вызовам и многое другое. Это приложение можно использовать как простой способ быстро проверить код или сценарий. Но все преимущества консоли также доступ­ ны в среде IDE, поэтому, когда под руками есть IDE, консоль выглядит устаревшей
#
# # Интерфейс документа Notebook
#
# **Ячейка кода** позволяет редактировать и писать новый код с выделением синтаксиса цветом и заполнением табуляцией. Используемый вами язык программирования зависит от ядра, а ядро по умолчанию (IPython) запускает код Python.
#
# **Ячейки Markdown** - это простой способ выполнить разметку текста и указать, какой текст нужно выделить курсивом, какой жирным шрифтом, где вставить список и т. д.
# Если вы хотите структурировать документ, вы можете использовать заголовки. За­ головки на языке Markdown обозначаются с помощью от I до 6 знаков решетки #, за которыми следует пробел и заголовок раздела. Заголовок Markdown преобразуется в интерактивную ссылку на этот раздел документа. Он также используется в качестве подсказки при экспорте в другие форматы документов, например PDF.
# При выполнении ячейки Markdown разметка Markdown преобразуется в соответствующий форматированный текст. Markdown также допускает форматирование с помощью НТМL-кода.
# В ячейки Markdown можно напрямую включать математику, используя стандарт­ ную нотацию LaTeX: для внутристрочных выражений или для больших формул.
#
# В **неформатированных ячейках** можно напрямую писать выходные данные. Нефор­матированные ячейки не анализируются документом и при передаче через nbconvert никак не преобразуются, и текст передается «как есть». Например, вы можете вве­ сти в неформатированную ячейку блок LaTeX, но отображаться как LaTeX он будет только после преобразования с помощью nbconvert.

#
