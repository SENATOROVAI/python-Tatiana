# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     notebook_metadata_filter: all
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
#   language_info:
#     codemirror_mode:
#       name: ipython
#       version: 3
#     file_extension: .py
#     mimetype: text/x-python
#     name: python
#     nbconvert_exporter: python
#     pygments_lexer: ipython3
#     version: 3.11.4
# ---

# ---<br>
# jupyter:<br>
#   jupytext:<br>
#     text_representation:<br>
#       extension: .py<br>
#       format_name: light<br>
#       format_version: '1.5'<br>
#       jupytext_version: 1.16.4<br>
#   kernelspec:<br>
#     display_name: base<br>
#     language: python<br>
#     name: python3<br>
# ---

"""Module on packages."""

import sys

# Если вы выйдете из интерпретатора Python и затем откроете его снова, все напи­<br>
# санные вами ранее определения (функции и переменные) будут потеряны. Следо­<br>
# вательно, если вы хотите написать более длинную программу, вам лучше использо­<br>
# вать текстовый редактор (например, Блокнот (Notepad) или любое другое про­<br>
# граммное обеспечение), в нем подготовить код для интерпретатора и запускать этот<br>
# файл. Это называется написать скрипт.

# Модуль— это файл, содержащий определения и инструкции Python. Имя такого<br>
# файла состоит из имени модуля и расширения ру.Каждый<br>
# модуль — это отдельный файл, который можно редактировать независимо. Внутри самого модуля его имя (в виде строки) доступно как значение глобальной переменной __ name__ .

# Мы создали модуль под названием fibo. В этом модуле fibo есть две пользователь­<br>
# ские функции. По сути, мы могли бы просто определить в интерпретаторе функции<br>
# f ib () и f ib2 ().

# Чтобы использовать наш модуль, нам нужно его импортировать. Зайдите в интер­претатор Python и импортируйте этот модуль с помощью следующей команды:import fibo

# Эта команда не добавляет имена всех функций, определенных в модуле fibo, в те­кущее пространство имен, а лишь добавляет туда имя модуля fibo.Если вы собираетесь использовать функцию часто, вы можете присвоить ей ло­кальное имя:<br>
# * fib = fibo.fib<br>
# * fib(500)

# # Импорт модулей из других модулей

# Существует также способ импортировать все имена из модуля.При этом импортируются все имена, кроме начинающихся с подчеркивания (_).

# Из соображений эффективности каждый модуль импортируется только один раз засеанс интерпретатора. Следовательно, если вы изменили содержимое уже импорти­рованного модуля, нужно перезапустить интерпретатор. Или, если вы хотите протес­тировать в интерактивном режиме только один модуль, используйте importlib.reload(),например:<br>
# * import importlib<br>
# * importlib.reload("module_name")

# В модуле sys содержаться  переменные sys.psi и sys.ps2 содержатся строки, используемые как пер­<br>
# вичные и вторичные приглашения:

print(sys.ps2)
sys.ps1

dir(sys)  # какие имена определены в данном модуле
# содержит список переменных, функций

# Встроенный модуль buildins - содержит список встроенных переменных и  функций

# Набор модулей - это ПАКЕТ. В пакетах могут быть подпаекты и подмодули.Код инициации пакета - это папка с названием _init_.py. В этом случае python обрабатывает папку как пакет. Пакеты позволяют структурировать множество пакетов и модулей, помогают до­биться хорошо организованной иерархии и облегчают доступ к папкам и модулям.

# Пакеты — это способ структурировать пространство имен модулей Python с помощью точечной нотации. Например, имя модуля А. В обозначает подмодуль с именем В в пакете А. Так же как использование модулей избавляет авторов модулей от необходимости думать об именах глобальных переменных, использование разделенных точками имен модулей спасает авторов многомодульных пакетов, таких как NumPy или Pillow, от необходимости заботиться о конфликтах имен модулей.

# * Пример пакета sound - для обработки звуко­вых файлов и звуковых данных. Существует множество различных форматов зву­ковых файлов (обычно они отличаются по расширению, например: wav, aiff, au,mp3 и т. д.).

# Файлы__ init__ .ру позволяют Python обрабатывать папки с файлами как пакеты. Это предотвращает непреднамеренное перезаписывание модулей с одинаковыми именами, например string. В простейшем случае файл__ init__ .ру может быть пустым файлом, но в нем может выполняться код инициализации пакета или устанав­<br>
# ливаться переменная_ all__ .

# Обратите внимание, что при использовании конструкции from пакет import элемент импортировать можно либо модуль (или подпакет), либо другой объект, опреде­ленный в пакете, например функцию, класс или переменную. Оператор  сначала проверяет, определен ли элемент в пакете; в противном случае он предпо­лагает, что это модуль, и пытается его загрузить. Если его не удается найти, возни­кает исключение ImportError. А в конструкции типа import элемент.подэлемент.подподэлемент каждый элемент, кроме последнего, должен быть пакетом; последний элемент может быть модулем или пакетом, но не может быть классом, функцией или переменной, определенной в предыдущем элементе.

# Пакеты, предназначенными для трех основных<br>
# областей Data Science:<br>
# ♦ сбор данных;<br>
# ♦ обработка данных и моделирование;<br>
# ♦ визуализация данных.

# # Сбор данных(Scrapy)

# Разработчики используют эту библиотеку для сбора данных из API. Этот фрейм­ворк написан по принципу Don't Repeat Yourself (DRY, «не повторяйся»). Такой инструмент вдохновляет пользователей на написание универсального кода, который можно повторно использовать для создания и масштабирования больших<br>
# поисковых роботов.

# # Обработка данных и моделирование

# *   NumPy (Numerical Python) — идеальный инструмент для научных вычислений<br>
# и выполнения простых и более сложных операций над массивами

# *   SciPy - библиотека содержит модули для выполнения вычислений из линей­<br>
# ной алгебры, интегрирования, оптимизации и статистики. Ее основная функцио­<br>
# нальность была построена на NumPy, поэтому вычисления с массивами она тоже<br>
# поддерживает. SciPy отлично подходит для всех видов проектов научного про­<br>
# граммирования (в сфере естествознания, математики и инженерии).

# *   Pandas - библиотека создана с целью помочь разработчикам в обработке «маркирован­<br>
# ных» и «реляционных» данных. Работа библиотеки опирается на две основные<br>
# структуры данных: Series (одномерный список элементов) и DataFrame (двумерная<br>
# структура вроде таблицы с несколькими столбцами). Pandas позволяет преобразо­<br>
# вывать структуры данных в объекты DataFrame, обрабатывать отсутствующие дан­<br>
# ные, добавлять/удалять столбцы из DataFrame, вводить отсутствующие файлы и<br>
# строить графики и гистограммы. Библиотека применяется для обработки и визуа­<br>
# лизации данных.

# * Scikit-learn -  отраслевой стандарт для проектов Data Science, написанных на Python. Scikit-learn — это группа пакетов в SciPy Stack, которые были созданы для конкретных<br>
# задач, например, для обработки изображений. В Scikit-learn для выполнения мате­матических операций используется библиотека SciPy, предоставляющая удобный<br>
# интерфейс для наиболее распространенных алгоритмов машинного обучения.<br>
# Специалисты по данным используют эту библиотеку для выполнения стандартных<br>
# задач машинного обучения и интеллектуального анализа данных, таких как класте­ризация, регрессия, выбор модели, уменьшение размерности и классификация.<br>
# А еще библиотека поставляется с качественной документацией и обладает высокой<br>
# производительностью.

# *   TensorFlow — это популярный фреймворк Python для машинного обучения и глу­бокого обучения, разработанный в Google Brain. Это лучший инструмент для таких<br>
# задач, как идентификация объектов, распознавание речи и многих других задач. Он<br>
# помогает в работе с искусственными нейронными сетями, которым необходимо<br>
# обрабатывать несколько наборов данных. Библиотека включает в себя различные<br>
# помощники по слоям (tflearn, tf-slim, skflow), которые делают ее еще более функ­<br>
# циональной. В TensorFlow постоянно появляются новые версии, включая исправ­<br>
# ления потенциальных уязвимостей безопасности или улучшения интеграции<br>
# TensorFlow и GPU.

# # Визуализация данных

# *   Matplotlib - стандартная библиотека Data Science, которая позволяет визуализировать данные, такие как двумерные диаграммы и графики (гистограммы, диаграммы рассея­ния и графики в недекартовых координатах). Matplotlib — одна из тех библиотек<br>
# построения графиков, которые полезны в проектах по Data Science благодаря<br>
# объектно-ориентированному API для встраивания графиков в приложения.<br>
# Благодаря этой библиотеке Python может конкурировать с такими научными инст­рументами, как MATLAB или Mathematica. Однако при использовании этой биб­лиотеки для создания сложных визуализаций разработчикам приходится писать больше кода, чем обычно. Обратите внимание, что популярные библиотеки по­строения графиков без проблем работают с Matplotlib.

# *   Seaborn - библиотека создана на основе Matplotlib и служит полезным инструментом<br>
# машинного обучения Python для визуализации статистических моделей — тепло­вых карт и других типов визуализаций, в которых приводится сводка данных<br>
# и отображаются общие распределения. При использовании этой библиотеки вам доступна широкая галерея визуализаций (включая сложные средства, такие как<br>
# временные ряды, совместные графики и скрипичные диаграммы).

# *   Bokeh библиотека — отличный инструмент для создания интерактивных и масштаби­<br>
# руемых визуализаций внутри браузеров с помощью виджетов JavaScript

# *   Plotly - веб-инструмент для визуализации данных, в котором уже встроено немало<br>
# полезной графики, — подробнее вы можете узнать на сайте plotly.com. Библиотека<br>
# очень хорошо работает в интерактивных веб-приложениях.

# Ответы на ваши вопросы:<br>
# <br>
# ▎1. Что имеется в виду под «созданием скрипта»? Чем это полезно для программиста?<br>
# <br>
# Создание скрипта подразумевает написание программы, которая выполняет определенные задачи или автоматизирует процессы. Это полезно для программиста, так как позволяет:<br>
# <br>
# • Автоматизировать рутинные задачи.<br>
# <br>
# • Упрощать сложные операции.<br>
# <br>
# • Разрабатывать и тестировать алгоритмы.<br>
# <br>
# • Делать код более организованным и повторно используемым.<br>
# <br>
# ▎2. Что имеется в виду под модулем Python? В чем важность модулей?<br>
# <br>
# Модуль Python — это файл с расширением .py, содержащий код (функции, классы, переменные), который можно импортировать и использовать в других программах. Важность модулей заключается в:<br>
# <br>
# • Организации кода: модули помогают разделить программу на логические части.<br>
# <br>
# • Повторном использовании кода: один и тот же модуль может использоваться в разных проектах.<br>
# <br>
# • Упрощении тестирования: модули можно тестировать по отдельности.<br>
# <br>
# ▎3. Как написать свой собственный модуль?<br>
# <br>
# Чтобы создать свой собственный модуль, выполните следующие шаги:<br>
# <br>
# Создайте новый файл с расширением .py <br>
# <br>
#  Напишите в этом файле функции, классы или переменные.<br>
# <br>
# Сохраните файл.<br>
# <br>
# ▎4. Как использовать созданный ранее модуль в своем нынешнем проекте?<br>
# <br>
# Чтобы использовать созданный модуль, выполните следующие шаги:<br>
# <br>
# 1. Убедитесь, что файл модуля находится в той же директории, что и ваш основной скрипт, или в одной из директорий, указанных в PYTHONPATH.<br>
# <br>
# 2. Импортируйте модуль в свой скрипт с помощью оператора import.<br>
#
# <br>
# ▎5. Что такое пакет? Как он связан с модулем?<br>
# <br>
# Пакет — это коллекция модулей, организованных в виде директории с файлом __init__.py. Пакеты позволяют группировать связанные модули и создавать иерархическую структуру для организации кода.<br>
# <br>
# ▎6. Как Python узнает, что нужно рассматривать какую-либо папку как пакет Python? Верно ли это и для подпакетов?<br>
# <br>
# Python распознает папку как пакет, если в ней есть файл __init__.py. Этот файл может быть пустым или содержать код инициализации пакета. Это также верно для подпакетов — каждая подпапка должна содержать свой собственный файл __init__.py.<br>
# <br>
# ▎7. Какими способами можно импортировать модуль, находящийся внутри пакета?<br>
# <br>
# Можно импортировать модуль несколькими способами:<br>
# <br>
# • Импортировать весь модуль:<br>
# <br>
#   from package import module<br>
# <br>
# <br>
# • Импортировать конкретные функции или классы:<br>
# <br>
#   from package.module import function_name<br>
# <br>
# <br>
# • Импортировать все содержимое модуля (не рекомендуется):<br>
# <br>
#   from package.module import *<br>
# <br>
# <br>
# ▎8. Зачем создавать пакеты? Чем они полезны?<br>
# <br>
# Создание пакетов позволяет:<br>
# <br>
# • Упорядочить и структурировать код.<br>
# <br>
# • Избежать конфликтов имен между модулями.<br>
# <br>
# • Упростить управление зависимостями и версиями.<br>
# <br>
# ▎9. Какой вклад вносят общедоступные пакеты в язык вроде Python? Чем они полезны для нового программиста или пользователя?<br>
# <br>
# Общедоступные пакеты предоставляют готовые решения для распространенных задач, что позволяет программистам:<br>
# <br>
# • Сэкономить время на разработку.<br>
# <br>
# • Изучать лучшие практики программирования.<br>
# <br>
# • Использовать проверенные и оптимизированные библиотеки для работы с данными, веб-разработки и т.д.<br>
# <br>
# ▎10. Назовите 5 общедоступных пакетов.<br>
# <br>
# 1. NumPy — библиотека для работы с многомерными массивами и матрицами.<br>
# <br>
# 2. Pandas — библиотека для анализа данных и работы с табличными данными.<br>
# <br>
# 3. Requests — библиотека для работы с HTTP-запросами.<br>
# <br>
# 4. Flask — легковесный веб-фреймворк для создания веб-приложений.<br>
# <br>
# 5. Django — мощный веб-фреймворк для разработки сложных веб-приложений.

# Правда или ложь<br>
# 1. Если функции и переменные были определены хотя бы один раз, то они будут<br>
# доступны вам всегда, даже если вы вышли из интерпретатора.<br>
# 2. Текстовый редактор ничем не отличается от любого текстового редактора, тако­<br>
# го как MS Word.270<br>
# |3. Определения из модуля можно импортировать в другие модули.<br>
# 4. Имя файла модуля имеет расширение ру.<br>
# 5. В Python нет встроенных модулей.<br>
# 6. При импорте модуля с использованием синтаксиса from модуль import<br>
# тируются все имена, кроме тех, которые начинаются с символа _.<br>
# 7. dir() - встроенная функция, позволяющая узнать, какие имена определены<br>
# в модуле.<br>
# 8. Пакет может содержать один или несколько модулей.<br>
# 9. NumPy — популярный пакет интеллектуального анализа данных в Python.<br>
# 10. Самая популярная библиотека визуализации в Python — это Matplotlib.

# Ответы:<br>
# <br>
# 1. Ложь. Если вы вышли из интерпретатора, функции и переменные не будут доступны, пока вы не запустите интерпретатор снова и не определите их заново.<br>
# <br>
# 2. Ложь. Текстовые редакторы, такие как Notepad или Sublime Text, предназначены для редактирования кода и не имеют функционала форматирования, как MS Word. MS Word — это текстовый процессор, который добавляет множество дополнительных функций.<br>
# <br>
# 3. Правда. Определения из одного модуля можно импортировать в другие модули с помощью оператора import.<br>
# <br>
# 4. Ложь. Имя файла модуля должно иметь расширение .py, а не .ру.<br>
# <br>
# 5. Ложь. В Python есть множество встроенных модулей, таких как math, sys, os и др.<br>
# <br>
# 6. Правда. При импорте с использованием синтаксиса from модуль import * импортируются все имена, кроме тех, которые начинаются с символа _.<br>
# <br>
# 7. Правда. Функция dir() позволяет узнать, какие имена определены в модуле или объекте.<br>
# <br>
# 8. Правда. Пакет может содержать один или несколько модулей.<br>
# <br>
# 9. Ложь. NumPy — это библиотека для работы с многомерными массивами и математическими операциями, а не именно для интеллектуального анализа данных.<br>
# <br>
# 10. Правда. Matplotlib является одной из самых популярных библиотек для визуализации данных в Python.
